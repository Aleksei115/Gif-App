{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getFetchGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GiffApp.js","index.js"],"names":["AddCategory","setCategory","useState","inputValue","setInputValue","onSubmit","element","preventDefault","preValues","className","type","value","onChange","target","GifGridItem","title","img","src","alt","getFetchGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","e","id","images","downsized","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","Box","columns","spacing","GifApp","categories","setCategories","ReactDOM","render","document","getElementById"],"mappings":"+LAIaA,EAAc,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAoBA,OACI,uBAAMC,SAVW,SAACC,GAClBA,EAAQC,iBACU,KAAfJ,GACCF,GAAa,SAAAO,GAAe,MAAM,CAAEL,GAAR,mBAAsBK,QAOtD,UACI,oBAAIC,UAAW,cAAf,oBACA,uBACAC,KAAO,OACPC,MAAUR,EACVS,SAxBkB,SAACN,GACvBF,EAAcE,EAAQO,OAAOF,QAwBzBF,UAAY,kB,QCpBTK,EAVK,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAE1B,OACI,qBAAKP,UAAa,UAAlB,SACI,qBAAKQ,IAAKD,EAAKE,IAAKH,EAAON,UAAW,c,yCCN5CU,EAAY,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,sEAEPC,EAFO,iDAE0CC,UAAUH,GAFpD,+DAGUI,MAAOF,GAHjB,cAGPG,EAHO,gBAIWA,EAASC,OAJpB,uBAIJC,EAJI,EAIJA,KAEHC,EAAOD,EAAKE,KAAK,SAACC,GACpB,MAAO,CACHC,GAAKD,EAAEC,GACPhB,MAAQe,EAAEf,MACVC,IAAMc,EAAEE,OAAOC,UAAUX,QAVpB,kBAcNM,GAdM,2DAiBL,CAAC,CACDG,GAAK,QACLhB,MAAQ,QACRC,IAAM,mGApBD,0DAAH,sDAyBHG,ICpBFe,EAAU,SAAC,GAAkB,IAAhBd,EAAe,EAAfA,SAEtB,ECFwB,SAAEA,GAE1B,MAA0BlB,mBAAS,CAC/ByB,KAAM,GACNQ,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAUA,OALAC,qBAAW,WACPnB,EAAcC,GACTmB,MAAM,SAAAd,GAAcY,EAAU,CAACV,KAAMF,EAAUU,SAAQ,SAC9D,CAACf,IAEIgB,EDVoBI,CAAapB,GAAhCO,EAAR,EAAQA,KAAOQ,EAAf,EAAeA,QAEf,OACI,gCACI,8BACI,oBAAI1B,UAAW,iBAAf,SAAkCW,MAEpCe,GAAW,wCACb,cAACM,EAAA,EAAD,UACI,cAAC,IAAD,CAASC,QAAS,EAAGC,QAAS,EAA9B,SAEQhB,EAAKE,KAAK,SAAEb,GACR,OACI,cAAC,EAAD,eAESA,GADGA,EAAIe,eEhBnCa,EAAS,WAElB,MAAoC1C,mBAAS,CAAC,YAA9C,mBAAO2C,EAAP,KAAmBC,EAAnB,KAEA,OACI,gCACI,oBAAIrC,UAAW,WAAf,qBACA,uBAEA,cAAC,EAAD,CAAaR,YAAc6C,IAC3B,8BAEQD,EAAWhB,KAAK,SAAET,GACd,OACI,cAAC,EAAD,CAEIA,SAAaA,GADNA,YCdvC2B,IAASC,OAAQ,cAAC,EAAD,IAAWC,SAASC,eAAe,W","file":"static/js/main.21542f3d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport  PropTypes  from \"prop-types\";\r\n\r\nexport const AddCategory = ({setCategory}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChange = (element) => {\r\n        setInputValue(element.target.value)\r\n    }\r\n\r\n    // La funcion que pasamos por props, es bidireccional, si hacemos un cambio desde el\r\n    // componente hijo con la funcion de estado de una varible del componente padre\r\n    // la variable del componente padre cambiara su estado\r\n    // Hay que tratar la funcion de estado como si estuviera en el componente que se declarÃ³\r\n\r\n    const handleSubmit = (element) => {\r\n        element.preventDefault();           //Evita que se recarge toda la pagina\r\n        if(inputValue !== ''){\r\n            setCategory (preValues => { return [inputValue,...preValues]} );   //hace que pongamos primero la nueva peticion y luego pre Values\r\n            // Para resetear el estado despues del enter\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <form onSubmit = { handleSubmit } >\r\n            <h2 className={'titleSearch'}>Search</h2>\r\n            <input \r\n            type = \"text\" \r\n            value = { inputValue } \r\n            onChange = { handleInputChange }\r\n            className ={'inputText'}\r\n            ></input>\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategory : PropTypes.func.isRequired,\r\n}","import React from \"react\";\r\n\r\n\r\nconst GifGridItem = ({ title, img }) => {\r\n\r\n    return(\r\n        <div className = {'gifCard'}>\r\n            <img src={img} alt={title} className={'imgGif'}/>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default GifGridItem;","\r\nconst getFetchGifs = async (category) => {\r\n    try{    \r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=SjgHAtoB1Bn8DOPBj4q6ArNdWnEt6BzX`;\r\n        const response = await fetch( url );\r\n        const  { data } = await response.json();\r\n\r\n        const gifs = data.map( (e) => {\r\n            return { \r\n                id : e.id,\r\n                title : e.title,\r\n                img : e.images.downsized.url\r\n            }\r\n        })\r\n        \r\n        return gifs\r\n    }\r\n    catch(e){\r\n        return ([{ \r\n                id : \"error\",\r\n                title : 'ERROR',\r\n                img : 'https://cdn.dribbble.com/users/2130329/screenshots/6621836/jiomoney_somethingwentwrong-01.png'\r\n            }])\r\n    }\r\n}\r\n\r\nexport default getFetchGifs;","import React from \"react\";\r\nimport GifGridItem from \"./GifGridItem\";\r\nimport Box from '@mui/material/Box';\r\nimport Mansory from '@mui/lab/Masonry';\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data , loading } = useFetchGifs(category);\r\n\r\n    return (\r\n        <div>\r\n            <div >\r\n                <h3 className={'titleCateogory'}>{category}</h3>\r\n            </div>\r\n            { loading && <p>Loading</p>}\r\n            <Box>\r\n                <Mansory columns={3} spacing={1}>\r\n                    {\r\n                        data.map( ( img ) => {\r\n                            return (\r\n                                <GifGridItem \r\n                                    key = { img.id }\r\n                                    { ...img }                                     //Paso las pops desestructuradas desde aqui\r\n                                />\r\n                            )\r\n                        })\r\n                    }\r\n                </Mansory>\r\n            </Box>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // Si la categoria cambia se vuelve a lanzar el useEffect pero\r\n    // En este caso no pasa porque la categoria es constante\r\n    // El efecto se implementa solo si la categoria cambia, no hace que caiga en ciclos infinitos\r\n    // useEffect( () => {\r\n    //     getGifs(category)\r\n    //         .then( setImages )\r\n    // },[ category ])\r\n","import { useEffect, useState } from \"react\"\r\nimport getFetchGifs from \"../helpers/getFetchGifs\"\r\n\r\n// rafc functional component\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect( () => {\r\n        getFetchGifs( category )\r\n            .then( response => { setState ({data: response, loading:false})})\r\n    },[category])\r\n\r\n    return state    //{ data , loading}\r\n\r\n}\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid'\r\nimport './index.css'\r\n\r\nexport const GifApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['Carnage'])\r\n\r\n    return (\r\n        <div>\r\n            <h2 className={'titleApp'}>Gif-App</h2>\r\n            <hr/>\r\n\r\n            <AddCategory setCategory={ setCategories }/>\r\n            <div>\r\n                {\r\n                    categories.map( ( category ) =>{ \r\n                        return(\r\n                            <GifGrid \r\n                                key = {category}\r\n                                category = { category }\r\n                            />\r\n                        )\r\n                    }\r\n                    )\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n  \r\n}\r\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifApp} from './GiffApp';\n\n\n\nReactDOM.render( <GifApp />,document.getElementById('root'));\n\n\n"],"sourceRoot":""}